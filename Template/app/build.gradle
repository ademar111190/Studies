apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"
apply plugin: "kotlin-kapt"

android {
    compileSdkVersion compileSdk
    buildToolsVersion buildTools

    defaultConfig {
        applicationId appId
        minSdkVersion minSdk
        targetSdkVersion targetSdk
        versionCode buildCode
        versionName buildName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
            storeFile file("../../../Assets/keystore")
            storePassword System.getenv("STORE_PASSWORD")
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            useProguard true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
        release {
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "environment"
    productFlavors {
        all {
            buildConfigField "Long", "CONNECT_TIMEOUT", "60000L"
            buildConfigField "Long", "READ_TIMEOUT", "60000L"
            buildConfigField "Long", "WRITE_TIMEOUT", "60000L"
        }
        development {
            versionName buildName + "-development"
            buildConfigField "String", "API_URL", "\"http://${getLocalIp()}:8080/\""
            buildConfigField "Long", "CONNECT_TIMEOUT", "1000L"
            buildConfigField "Long", "READ_TIMEOUT", "1000L"
            buildConfigField "Long", "WRITE_TIMEOUT", "1000L"
        }
        qa {
            versionName buildName + "-qa-" + getCommit()
            buildConfigField "String", "API_URL", "\"https://qa.url/\""
        }
        production {
            buildConfigField "String", "API_URL", "\"https://prod.url/\""
        }
    }

    packagingOptions {
        exclude "META-INF/LICENSE"
        exclude "META-INF/LICENSE.txt"
        exclude "META-INF/NOTICE.txt"
        exclude "META-INF/*.properties"
    }
}

androidExtensions {
    experimental = true
}

dependencies {
    annotations.each {
        kapt it
        kaptTest it
    }
    libraries.each { implementation it }
    unitTests.each { testImplementation it }
    uiTests.each { androidTestImplementation it }
}

static def getLocalIp() {
    return NetworkInterface.getNetworkInterfaces().findResult(InetAddress.getLocalHost().getCanonicalHostName()) {
        if (it.isUp() && !it.isVirtual() && !it.isPointToPoint() && !it.isLoopback() && !it.getName().startsWith("br-"))
            return it.getInetAddresses().find {
                it instanceof Inet4Address && !it.isLoopbackAddress()
            }?.toString()?.dropWhile { it == '/' }
        else return null
    }
}

static def getCommit() {
    return "git rev-parse --short HEAD".execute().text.trim()
}
