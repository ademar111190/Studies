apply plugin: "com.android.library"
apply plugin: "kotlin-kapt"
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"

android {

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
    }

    defaultConfig {
        consumerProguardFiles "proguard-rules.pro"
    }

}

androidExtensions {
    experimental = true
}

dependencies {

    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kapt "se.ansman.kotshi:compiler:$kotshiVersion"

    api "com.android.support:support-annotations:$supportVersion"
    api "com.google.dagger:dagger:$daggerVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"
    implementation "com.squareup.okhttp3:okhttp:$okHttpVersion"
    api "com.squareup.moshi:moshi-kotlin:$moshiVersion"
    api "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    api "com.squareup.retrofit2:converter-moshi:$retrofitVersion"
    api "com.squareup.retrofit2:retrofit:$retrofitVersion"
    api "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"
    api "io.reactivex.rxjava2:rxjava:$rxJavaVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    api "se.ansman.kotshi:api:$kotshiVersion"

    kaptTest "com.google.dagger:dagger-compiler:$daggerVersion"

    testImplementation "com.squareup.okhttp3:mockwebserver:$okHttpVersion"
    testImplementation "com.nhaarman:mockito-kotlin:$mockitoKotlinVersion"
    testImplementation "junit:junit:$jUnitVersion"
    testImplementation "org.assertj:assertj-core:$assertJVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"

}

tasks.withType(Test) {
    afterTest { desc, result ->
        println "${result.resultType} on test ${desc.name} [${desc.className}]"
    }
}
